AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: mykey
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DBName:
    Type: String
    Default: "MyDatabase"
    MinLength: 1
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBUsername:
    Type: String
    NoEcho: True
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBPassword:
    Type: String
    NoEcho: True
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBRootPassword:
    Type: String
    NoEcho: True
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'

Resources:
  Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lnmp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  Lnmp:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource Lnmp \
            --configsets Configure \
            --region ${AWS::Region}
      SecurityGroupIds:
        - !Ref Sg
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Configure:
            - "Mysql"
            - "DbSetup"
            - "Php"
            - "Nginx"
        Mysql:
          packages:
            yum:
              mariadb: []
              mariadb-server: []
              mariadb-libs: []
          files:
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE ${DBName};
                GRANT ALL ON ${DBName}.* TO '${DBUsername}'@localhost IDENTIFIED BY '${DBPassword}';
              mode: 400
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: 400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Lnmp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Lnmp --configsets Configure --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              mariadb:
                enabled: True
                ensureRunning: True
              cfn-hup:
                enabled: True
                ensureRunning: True
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        DbSetup:
          commands:
            01_set_mysql_root_pw:
              command: !Sub "mysqladmin -u root password '${DBRootPassword}'"
            02_create_database:
              command: !Sub "mysql -u root --password='${DBRootPassword}' < /tmp/setup.mysql"
              test: !Sub "$(mysql ${DBUsername} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
            03_install_extras:
              command: "amazon-linux-extras install epel"
        Php:
          packages:
            yum:
              php: []
              php-mysql: []
              php-fpm: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <html>
                  <head>
                    <title>AWS CloudFormation PHP Sample</title>
                    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                  </head>
                  <body>
                  <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
                  <p/>
                  <?php
                      // Print out the current data and time
                      print "The Current Date and Time is: <br/>";
                      print date("g:i A l, F j Y.");
                  ?>
                    <p/>
                    <?php
                      // Setup a handle for CURL
                      $curl_handle=curl_init();
                      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                      // Get the hostname of the instance from the instance metadata
                      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                      $hostname = curl_exec($curl_handle);
                      if (empty($hostname))
                      {
                        print "Sorry, for some reason, we got no hostname back <br />";
                      }
                      else
                      {
                        print "Server = " . $hostname . "<br />";
                      }
                      // Get the instance-id of the instance from the instance metadata
                      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                      $instanceid = curl_exec($curl_handle);
                      if (empty($instanceid))
                      {
                        print "Sorry, for some reason, we got no instance id back <br />";
                      }
                      else
                      {
                        print "EC2 instance-id = " . $instanceid . "<br />";
                      }
                      $Database   = "${DBName}";
                      $DBUser     = "${DBUsername}";
                      $DBPassword = "${DBPassword}";
                      print "Database = " . $Database . "<br />";
                      $dbconnection = mysql_connect("localhost", $DBUser, $DBPassword)
                                      or die("Could not connect: " . mysql_error());
                      print ("Connected to $Database successfully");
                      mysql_close($dbconnection);
                    ?>
                    <h2>PHP Information</h2>
                    <p/>
                    <?php
                      phpinfo();
                    ?>
                  </body>
                </html>
              mode: 644
              owner: root
              group: root
          services:
            sysvinit:
              php-fpm:
                enabled: True
                ensureRunning: True
        Nginx:
          packages:
            yum:
              nginx: []
          files:
            /etc/nginx/nginx.conf:
              content: |
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /run/nginx.pid;
                include /usr/share/nginx/modules/*.conf;
                events {
                    worker_connections 1024;
                }
                http {
                    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                                      '\$status \$body_bytes_sent "\$http_referer" '
                                      '"\$http_user_agent" "\$http_x_forwarded_for"';
                    access_log  /var/log/nginx/access.log  main;
                    sendfile            on;
                    tcp_nopush          on;
                    tcp_nodelay         on;
                    keepalive_timeout   65;
                    types_hash_max_size 2048;
                    include             /etc/nginx/mime.types;
                    default_type        application/octet-stream;
                    include /etc/nginx/conf.d/*.conf;
                }
            /etc/nginx/conf.d/default.conf:
              content: |
                server {
                    listen 80;
                    root /var/www/html;
                    index index.php index.html index.htm;

                    location / {
                        try_files $uri $uri/ =404;
                    }
                    location ~ \.php$ {
                        include fastcgi_params;
                        fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
                        fastcgi_pass 127.0.0.1:9000;
                    }
                    location ~ /\.ht {
                        deny all;
                    }
                }
          services:
            sysvinit:
              nginx:
                enabled: True
                ensureRunning: True
Outputs:
  WebsiteURL:
    Value: !Sub "http://${Lnmp.PublicDnsName}"